1
00:00:02,150 --> 00:00:03,930
So at this point,

2
00:00:03,930 --> 00:00:08,229
processTransactions already is pretty readable and slim.

3
00:00:08,229 --> 00:00:11,910
processTransaction, on the other hand is not.

4
00:00:11,910 --> 00:00:13,210
We got our regard here,

5
00:00:13,210 --> 00:00:15,810
but then thereafter, we got all this code.

6
00:00:15,810 --> 00:00:17,310
And the question is,

7
00:00:17,310 --> 00:00:19,660
how can we simplify that,

8
00:00:19,660 --> 00:00:22,348
it will turn out that we can do multiple things

9
00:00:22,348 --> 00:00:26,300
but a first step could still be that we extract

10
00:00:26,300 --> 00:00:27,880
even more functions.

11
00:00:27,880 --> 00:00:30,010
And therefore, of course, as always

12
00:00:30,010 --> 00:00:31,670
through out this section,

13
00:00:31,670 --> 00:00:34,970
feel free to pause the video and try this on your own.

14
00:00:34,970 --> 00:00:36,990
Try to extract more functions,

15
00:00:36,990 --> 00:00:39,090
which would make sense to you

16
00:00:39,090 --> 00:00:42,220
after a short break, which you can use to pause the video

17
00:00:42,220 --> 00:00:44,473
we're going to extract more logic together.

18
00:00:46,345 --> 00:00:50,520
So did you find functions you could extract?

19
00:00:50,520 --> 00:00:53,970
I think one kind of function we could extract

20
00:00:53,970 --> 00:00:56,789
is a function that deals only with payments

21
00:00:56,789 --> 00:01:01,510
and the function that deals only with refunds.

22
00:01:01,510 --> 00:01:03,170
That's something we could do.

23
00:01:03,170 --> 00:01:06,380
So we could add a new function here,

24
00:01:06,380 --> 00:01:11,380
which we name processPayments, for example,

25
00:01:12,890 --> 00:01:15,650
or processPayment, because we're actually

26
00:01:15,650 --> 00:01:17,520
working on a single transaction

27
00:01:18,550 --> 00:01:21,250
where we then get our paymentTransaction

28
00:01:21,250 --> 00:01:23,190
as an argument.

29
00:01:23,190 --> 00:01:25,480
And we could grab this code here,

30
00:01:25,480 --> 00:01:27,900
because we still need to check which method

31
00:01:27,900 --> 00:01:31,783
was used and put that into processPayment.

32
00:01:32,760 --> 00:01:35,710
And because I use paymentTransaction as a name here

33
00:01:35,710 --> 00:01:38,940
I'm going to replace the transaction variable here

34
00:01:38,940 --> 00:01:40,593
with payment transaction.

35
00:01:41,660 --> 00:01:43,740
Now we got this code down there

36
00:01:43,740 --> 00:01:48,270
and therefore here we can call process payment

37
00:01:48,270 --> 00:01:50,313
and forward the transaction.

38
00:01:51,760 --> 00:01:53,940
And obviously we can do the same here

39
00:01:53,940 --> 00:01:58,610
for our average transaction type, for the refunds.

40
00:01:58,610 --> 00:02:03,120
We can cut this and add a new function processRefund.

41
00:02:04,640 --> 00:02:08,979
Here we get our refund transaction as a parameter,

42
00:02:08,979 --> 00:02:10,410
and in the function body.

43
00:02:10,410 --> 00:02:15,410
We have if checks and we work on the refund transaction.

44
00:02:15,530 --> 00:02:19,160
So let's make sure that naming is right now.

45
00:02:19,160 --> 00:02:21,247
We've got process refund and hence,

46
00:02:21,247 --> 00:02:26,247
we can call this here process refund,

47
00:02:26,430 --> 00:02:27,263
for what?

48
00:02:27,263 --> 00:02:28,096
The transaction.

49
00:02:28,940 --> 00:02:31,260
Now here we were logging in the error though

50
00:02:31,260 --> 00:02:34,940
with the addition that we also have a transaction here.

51
00:02:34,940 --> 00:02:36,640
So we don't just have a message

52
00:02:36,640 --> 00:02:39,485
but we also print the transaction, which was the problem.

53
00:02:39,485 --> 00:02:42,000
And here we also have an error though here.

54
00:02:42,000 --> 00:02:43,193
It's just a message.

55
00:02:44,060 --> 00:02:47,328
Now we already have a show error message function.

56
00:02:47,328 --> 00:02:50,440
And we could now just tweak this a little bit

57
00:02:50,440 --> 00:02:53,500
so that it does not just print a message

58
00:02:53,500 --> 00:02:57,020
but all the information about the let's say item

59
00:02:57,020 --> 00:02:59,650
which was responsible for the error and we could deal

60
00:02:59,650 --> 00:03:04,170
for simply print the message and then check if item is set.

61
00:03:04,170 --> 00:03:08,470
So if it's not no, and then also console log,

62
00:03:08,470 --> 00:03:10,730
the item for example.

63
00:03:10,730 --> 00:03:15,150
So that'd be console.log, of the message and the item.

64
00:03:15,150 --> 00:03:17,280
And that's the JavaScript way of doing it.

65
00:03:17,280 --> 00:03:18,840
This check is important

66
00:03:18,840 --> 00:03:21,320
because item might not be set.

67
00:03:21,320 --> 00:03:24,307
For example, when we call a show error message here

68
00:03:24,307 --> 00:03:27,030
then we pass no second argument,

69
00:03:27,030 --> 00:03:29,220
and the offer item would be undefined.

70
00:03:29,220 --> 00:03:32,070
And I don't want a console log undefined.

71
00:03:32,070 --> 00:03:33,430
That's why I first of all,

72
00:03:33,430 --> 00:03:36,300
check whether we have an item and if we do

73
00:03:36,300 --> 00:03:38,420
then we console log it.

74
00:03:38,420 --> 00:03:41,617
And with this tweaked show error message function.

75
00:03:41,617 --> 00:03:45,780
You can use it here to show an error message

76
00:03:45,780 --> 00:03:50,180
and we can also use it down there to show an error message.

77
00:03:50,180 --> 00:03:51,590
And now with that,

78
00:03:51,590 --> 00:03:55,870
processTransaction is way more readable.

79
00:03:55,870 --> 00:03:58,330
But we can certainly extract more,

80
00:03:58,330 --> 00:04:00,280
What about these checks?

81
00:04:00,280 --> 00:04:03,070
They are on a different level of abstraction

82
00:04:03,070 --> 00:04:04,890
than the rest of this function

83
00:04:04,890 --> 00:04:07,440
because we just call our functions here.

84
00:04:07,440 --> 00:04:10,084
And then we have these low level checks.

85
00:04:10,084 --> 00:04:13,940
No, I personally think that's this but

86
00:04:13,940 --> 00:04:17,100
because this is quite straightforward to read.

87
00:04:17,100 --> 00:04:19,079
Nonetheless, you could make the argument

88
00:04:19,079 --> 00:04:20,750
that you want to be extremely clean

89
00:04:20,750 --> 00:04:23,320
and that you deal for one outsource this as well.

90
00:04:23,320 --> 00:04:24,312
Though, keep in mind that you also can reach

91
00:04:24,312 --> 00:04:28,140
a point where you're splitting too much

92
00:04:28,140 --> 00:04:31,030
and this year is definitely on the edge.

93
00:04:31,030 --> 00:04:34,890
Nonetheless, we could add a new function here

94
00:04:34,890 --> 00:04:35,723
where we check.

95
00:04:35,723 --> 00:04:40,520
If the transaction is open and we get to the transaction

96
00:04:41,700 --> 00:04:46,480
as a parameter, and then we return in the body.

97
00:04:46,480 --> 00:04:49,339
The result of checking if transactionStatus

98
00:04:49,339 --> 00:04:52,100
is equal to, 'OPEN'.

99
00:04:52,100 --> 00:04:54,330
And that should be transaction Of course,

100
00:04:54,330 --> 00:04:56,390
this was a mistake I made before as well.

101
00:04:56,390 --> 00:04:59,110
This should be transaction, not transactions

102
00:04:59,110 --> 00:05:01,123
because this ends out of processTransaction.

103
00:05:02,130 --> 00:05:05,040
Now here we can check if a transaction is open

104
00:05:05,040 --> 00:05:08,120
or to be precise, if it's not open

105
00:05:08,120 --> 00:05:09,773
by adding this exclamation mark.

106
00:05:10,830 --> 00:05:12,890
As a side note you might argue

107
00:05:12,890 --> 00:05:16,850
that this is not phrasing this in a positive way done,

108
00:05:16,850 --> 00:05:19,800
but I would argue that the name of the function itself

109
00:05:19,800 --> 00:05:21,730
is phrased positively.

110
00:05:21,730 --> 00:05:24,730
It's isOpen, not is not open.

111
00:05:24,730 --> 00:05:26,690
And then we just add an exclamation mark

112
00:05:26,690 --> 00:05:28,730
which is quite easy to pick up.

113
00:05:28,730 --> 00:05:32,080
Nobody we could definitely rename this to isNotOpen

114
00:05:32,080 --> 00:05:34,360
and change the check in there to get rid

115
00:05:34,360 --> 00:05:36,040
of the exclamation mark here.

116
00:05:36,040 --> 00:05:37,970
And if you find that easier to read,

117
00:05:37,970 --> 00:05:39,960
you could, of course also do that even though

118
00:05:39,960 --> 00:05:42,930
it's not phrased in a positive way.

119
00:05:42,930 --> 00:05:46,310
Now I will go back to not is open though.

120
00:05:46,310 --> 00:05:49,660
Alternatively, you could also name it isClosed.

121
00:05:49,660 --> 00:05:51,490
The problem with that just is

122
00:05:51,490 --> 00:05:56,490
we don't know if the only other status is it being closed.

123
00:05:56,660 --> 00:05:59,150
So we check for does being closed,

124
00:05:59,150 --> 00:06:01,080
if there's also something like white

125
00:06:01,080 --> 00:06:05,470
or anything like that, then this check wouldn't succeed.

126
00:06:05,470 --> 00:06:07,060
So here, I really just want to check

127
00:06:07,060 --> 00:06:09,590
for whether it's open and then not continue

128
00:06:09,590 --> 00:06:11,070
if it's not open.

129
00:06:11,070 --> 00:06:13,383
That's why I'm solving this issue like this.

130
00:06:14,660 --> 00:06:17,210
With that, however, we extracted this logic

131
00:06:17,210 --> 00:06:18,910
and of course we can do the same here

132
00:06:18,910 --> 00:06:21,760
for the payment and the refund.

133
00:06:21,760 --> 00:06:24,595
We can add functions for isPayment,

134
00:06:24,595 --> 00:06:28,044
where we get a transaction and then return

135
00:06:28,044 --> 00:06:33,030
this check and a function for checking if it's a refund.

136
00:06:33,030 --> 00:06:36,691
So here we have isRefund and we get a transaction

137
00:06:36,691 --> 00:06:41,405
and we then simply returned a result of this checkup there.

138
00:06:41,405 --> 00:06:45,910
So return transaction.type equals 'REFUND'.

139
00:06:45,910 --> 00:06:49,610
And then we can just call isPayment here,

140
00:06:49,610 --> 00:06:51,465
and forward the transaction

141
00:06:51,465 --> 00:06:56,293
and isRefund and forward the transaction.

142
00:06:57,300 --> 00:07:00,520
And now we got rid of these mixed levels of abstraction.

143
00:07:00,520 --> 00:07:03,210
And we now got a pretty readable process

144
00:07:03,210 --> 00:07:05,310
transaction function.

145
00:07:05,310 --> 00:07:07,600
Nonetheless, we're not done yet.

146
00:07:07,600 --> 00:07:10,606
It's definitely way cleaner than it was initially.

147
00:07:10,606 --> 00:07:14,380
But what about these two functions?

148
00:07:14,380 --> 00:07:17,456
processPayment and processRefund.

149
00:07:17,456 --> 00:07:21,079
These functions actually have code duplication,

150
00:07:21,079 --> 00:07:23,670
kind of inside of them.

151
00:07:23,670 --> 00:07:27,390
And they also are still not super clean.

152
00:07:27,390 --> 00:07:28,450
You could argue.

153
00:07:28,450 --> 00:07:30,043
So what can we do about them?

