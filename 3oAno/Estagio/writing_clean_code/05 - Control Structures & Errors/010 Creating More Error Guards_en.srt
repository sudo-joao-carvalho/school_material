1
00:00:02,320 --> 00:00:05,220
Now, of course, in our demo application here,

2
00:00:05,220 --> 00:00:07,069
we've got two other places

3
00:00:07,069 --> 00:00:09,920
wherein the end we are dealing with errors.

4
00:00:09,920 --> 00:00:12,330
And that's here in processTransaction.

5
00:00:12,330 --> 00:00:15,010
This check where we see whether a transaction

6
00:00:15,010 --> 00:00:15,950
is open or not.

7
00:00:15,950 --> 00:00:19,640
And then in all these processes here,

8
00:00:19,640 --> 00:00:22,940
in all these processes transaction function down there,

9
00:00:22,940 --> 00:00:25,010
we also print an error message

10
00:00:25,010 --> 00:00:27,730
if we have neither a payment,

11
00:00:27,730 --> 00:00:29,880
nor a refund transaction.

12
00:00:29,880 --> 00:00:32,603
So if we have some invalid transaction type.

13
00:00:35,050 --> 00:00:37,760
Again, a better way of handling this

14
00:00:37,760 --> 00:00:40,470
would be to generate a real error

15
00:00:40,470 --> 00:00:42,573
and then treat it somewhere else.

16
00:00:44,230 --> 00:00:47,083
So let's maybe start here in processTransaction.

17
00:00:48,230 --> 00:00:52,270
If the transaction is not open,

18
00:00:52,270 --> 00:00:54,263
then we can create an error,

19
00:00:56,110 --> 00:01:01,110
a new Error with a value of Invalid transaction type.

20
00:01:03,750 --> 00:01:05,410
This is my message.

21
00:01:05,410 --> 00:01:08,660
And then I wanna throw this error.

22
00:01:08,660 --> 00:01:10,280
Here, I don't add a code

23
00:01:10,280 --> 00:01:11,690
because here for this logic,

24
00:01:11,690 --> 00:01:12,570
I don't really need it.

25
00:01:12,570 --> 00:01:15,110
That was just from the example before,

26
00:01:15,110 --> 00:01:17,370
showing you that you could add this code,

27
00:01:17,370 --> 00:01:20,080
even though we also don't use it here, by the way.

28
00:01:20,080 --> 00:01:21,890
We add it but we never use it.

29
00:01:21,890 --> 00:01:24,200
So you could remove it here as well.

30
00:01:24,200 --> 00:01:25,879
We definitely don't need it down there

31
00:01:25,879 --> 00:01:27,850
but now we're throwing an error

32
00:01:27,850 --> 00:01:29,600
instead of handling the error here.

33
00:01:31,700 --> 00:01:33,286
Now, we can do the same here

34
00:01:33,286 --> 00:01:34,936
for processCreditCardTransaction.

35
00:01:37,710 --> 00:01:40,690
And processPayPalTransaction and so on.

36
00:01:40,690 --> 00:01:42,927
Here we can also create an error,

37
00:01:42,927 --> 00:01:47,003
a new Error with this text.

38
00:01:50,440 --> 00:01:52,370
And here we can add some extra data,

39
00:01:52,370 --> 00:01:53,600
for example, the item,

40
00:01:53,600 --> 00:01:55,540
which was responsible for this error,

41
00:01:55,540 --> 00:01:57,890
which is the transaction that caused this.

42
00:01:57,890 --> 00:02:00,323
And then we throw this error.

43
00:02:02,180 --> 00:02:04,200
Now we just have to repeat this code

44
00:02:04,200 --> 00:02:05,660
and all these functions

45
00:02:05,660 --> 00:02:08,402
and as you know, repeating code like this is bad.

46
00:02:09,400 --> 00:02:11,150
So what could we do?

47
00:02:11,150 --> 00:02:13,600
Well, we could again utilize a guard.

48
00:02:13,600 --> 00:02:15,350
We could remove the code from here

49
00:02:15,350 --> 00:02:17,610
and remove this else statement

50
00:02:17,610 --> 00:02:20,713
in all these process functions.

51
00:02:24,210 --> 00:02:26,663
And instead move that here to processTransaction.

52
00:02:28,060 --> 00:02:31,377
Before we actually start triggering processCreditCard,

53
00:02:31,377 --> 00:02:33,960
processPayPal and processPlanTransaction.

54
00:02:33,960 --> 00:02:37,090
We could check whether we do have an invalid transaction

55
00:02:38,330 --> 00:02:41,060
simply by adding an extra guard here.

56
00:02:41,060 --> 00:02:45,060
Here we could check if we have neither a payment

57
00:02:46,500 --> 00:02:49,810
nor a refund

58
00:02:49,810 --> 00:02:51,480
because that is the check we had

59
00:02:51,480 --> 00:02:53,520
in these nested functions before.

60
00:02:53,520 --> 00:02:54,530
And if that's the case,

61
00:02:54,530 --> 00:02:57,470
we wanna generate and throw an error.

62
00:02:57,470 --> 00:03:02,470
So we added a new guard to move some nested logic out

63
00:03:02,480 --> 00:03:05,810
of these nested if statements to a higher level

64
00:03:05,810 --> 00:03:08,180
because we can already perform this check here

65
00:03:08,180 --> 00:03:11,000
and check for whether we have a payment or a refund.

66
00:03:11,000 --> 00:03:12,670
And if neither of the two is the case,

67
00:03:12,670 --> 00:03:14,750
I wanna generate an error.

68
00:03:14,750 --> 00:03:18,480
Now we generate and throw two different errors here

69
00:03:18,480 --> 00:03:19,580
in processTransaction.

70
00:03:20,750 --> 00:03:23,360
The question is where do we now handle them?

71
00:03:23,360 --> 00:03:27,480
And the answer is not here in this error handler,

72
00:03:27,480 --> 00:03:29,180
which we added before

73
00:03:29,180 --> 00:03:32,240
because we must keep in mind that these errors

74
00:03:32,240 --> 00:03:34,920
are thrown for single transactions,

75
00:03:34,920 --> 00:03:38,440
so they should not stop processing all transactions,

76
00:03:38,440 --> 00:03:42,183
they should just stop processing this specific transaction.

77
00:03:43,350 --> 00:03:46,800
Hence we wanna handle the errors here in this for loop.

78
00:03:46,800 --> 00:03:49,309
Here we can add a try catch block

79
00:03:49,309 --> 00:03:52,160
and try processing a transaction

80
00:03:52,160 --> 00:03:54,680
but catch an error if we got it.

81
00:03:54,680 --> 00:03:56,848
And then show an error message here,

82
00:03:56,848 --> 00:03:59,170
forward the error.message

83
00:03:59,170 --> 00:04:02,620
and the error.data or the error.item

84
00:04:02,620 --> 00:04:04,290
was the name I picked.

85
00:04:04,290 --> 00:04:06,820
This maybe undefined for some errors

86
00:04:06,820 --> 00:04:08,040
but that's no problem

87
00:04:08,040 --> 00:04:09,700
because we have a check for this

88
00:04:09,700 --> 00:04:12,120
inside of showErrorMessage.

89
00:04:12,120 --> 00:04:13,780
So now we moved this around

90
00:04:13,780 --> 00:04:17,700
and we're using proper errors for well, working with errors

91
00:04:17,700 --> 00:04:19,320
because that is what we have here.

92
00:04:19,320 --> 00:04:21,880
And doing that instead of using if statements

93
00:04:21,880 --> 00:04:23,850
where we then log something in place

94
00:04:23,850 --> 00:04:25,533
is definitely recommended.

