1
00:00:02,070 --> 00:00:04,760
Now let's conclude the SOLID Principles,

2
00:00:04,760 --> 00:00:08,880
by having a look at the last principle in this list here.

3
00:00:08,880 --> 00:00:12,170
The Dependency Inversion Principle.

4
00:00:12,170 --> 00:00:14,307
What is this principle about?

5
00:00:14,307 --> 00:00:16,720
The Dependency Inversion Principle

6
00:00:16,720 --> 00:00:19,810
says that you should depend upon abstractions

7
00:00:19,810 --> 00:00:21,423
not concretions.

8
00:00:22,270 --> 00:00:26,270
And that's a super fancy term, which I don't know about you,

9
00:00:26,270 --> 00:00:29,440
but which might be totally unclear.

10
00:00:29,440 --> 00:00:32,720
At least this sentence was totally unclear to me,

11
00:00:32,720 --> 00:00:34,930
when I first read it.

12
00:00:34,930 --> 00:00:36,900
It is however not even close

13
00:00:36,900 --> 00:00:39,620
as complex and complicated as it sounds.

14
00:00:39,620 --> 00:00:43,150
And if you are following the other principles already,

15
00:00:43,150 --> 00:00:45,090
then chances are pretty high

16
00:00:45,090 --> 00:00:47,850
that you're already following this one as well,

17
00:00:47,850 --> 00:00:51,860
or at least that it's very easy to follow this one as well.

18
00:00:51,860 --> 00:00:54,080
Now here I got another example,

19
00:00:54,080 --> 00:00:55,840
which actually is very close

20
00:00:55,840 --> 00:00:58,480
to the Interface Segregation Principle,

21
00:00:58,480 --> 00:01:00,680
we covered in the last lecture.

22
00:01:00,680 --> 00:01:03,770
Following the Interface Segregation Principle,

23
00:01:03,770 --> 00:01:06,080
I got two interfaces here,

24
00:01:06,080 --> 00:01:09,180
Database and Remote Database Interface.

25
00:01:09,180 --> 00:01:11,460
And then I got two classes,

26
00:01:11,460 --> 00:01:15,890
the SQL database class and the In-memory database class,

27
00:01:15,890 --> 00:01:18,823
which actually use these Interfaces.

28
00:01:19,780 --> 00:01:22,860
Now, I also got an app class down there,

29
00:01:22,860 --> 00:01:25,820
where I actually need a database

30
00:01:25,820 --> 00:01:28,350
as agreement in the constructor.

31
00:01:28,350 --> 00:01:32,620
And that database either has to be a SQL database,

32
00:01:32,620 --> 00:01:34,900
or an In-memory database.

33
00:01:34,900 --> 00:01:37,040
This app works with both.

34
00:01:37,040 --> 00:01:38,910
But depending on what it is,

35
00:01:38,910 --> 00:01:43,100
I have to run the connect method as part of my constructor.

36
00:01:43,100 --> 00:01:45,713
That's why I have this if-check here.

37
00:01:46,910 --> 00:01:48,760
The problem with this example,

38
00:01:48,760 --> 00:01:51,660
is that we depend on concretions.

39
00:01:51,660 --> 00:01:56,280
I depend on the concrete implementation of my database.

40
00:01:56,280 --> 00:01:58,310
I accept both types here,

41
00:01:58,310 --> 00:02:01,700
and therefore I have to check which type I'm getting,

42
00:02:01,700 --> 00:02:04,550
so that I can execute this extra code,

43
00:02:04,550 --> 00:02:06,830
which I might need to execute.

44
00:02:06,830 --> 00:02:08,169
Now, it shouldn't be needless to say

45
00:02:08,169 --> 00:02:11,320
that code like this can be hard to maintain,

46
00:02:11,320 --> 00:02:14,260
because the more types of databases we add,

47
00:02:14,260 --> 00:02:17,090
the more if-checks we might need to add here,

48
00:02:17,090 --> 00:02:19,360
and whenever the connect method changes

49
00:02:19,360 --> 00:02:21,960
we also need to change it in all the places

50
00:02:21,960 --> 00:02:24,320
where we do have a check like this

51
00:02:24,320 --> 00:02:26,513
and where we do call connect.

52
00:02:27,510 --> 00:02:29,840
So therefore this could become a problem

53
00:02:29,840 --> 00:02:33,430
in bigger applications where you maybe also have

54
00:02:33,430 --> 00:02:35,970
different kinds of databases.

55
00:02:35,970 --> 00:02:37,490
Now we can change the code

56
00:02:37,490 --> 00:02:40,340
to follow the Dependency Inversion Principle though,

57
00:02:40,340 --> 00:02:42,710
and changing it will be very simple

58
00:02:42,710 --> 00:02:44,180
because I'm already following

59
00:02:44,180 --> 00:02:46,850
the Interface Segregation Principle here

60
00:02:46,850 --> 00:02:49,203
by having my different interfaces.

61
00:02:50,100 --> 00:02:53,730
These interfaces in the end are abstractions.

62
00:02:53,730 --> 00:02:58,290
I can use these interfaces to buy certain functionalities

63
00:02:58,290 --> 00:03:00,578
to ensure certain functionalities

64
00:03:00,578 --> 00:03:04,270
without knowing how exactly they work under the hood.

65
00:03:04,270 --> 00:03:07,490
But I can rely on the fact that for example

66
00:03:07,490 --> 00:03:10,843
a connect method or a store data method is there.

67
00:03:12,240 --> 00:03:14,620
And then here in this app, we could say

68
00:03:14,620 --> 00:03:18,570
that in the end all we want is a database.

69
00:03:18,570 --> 00:03:21,560
I don't wanna deal with connecting here.

70
00:03:21,560 --> 00:03:25,330
I just want to ensure that the type of database I have here

71
00:03:25,330 --> 00:03:29,430
the type of disagreement is of type database.

72
00:03:29,430 --> 00:03:31,060
So it should be a class

73
00:03:31,060 --> 00:03:34,293
which implements the database interface.

74
00:03:35,170 --> 00:03:37,010
And the database interface

75
00:03:37,010 --> 00:03:40,400
in the end just ensures that there is a store data method,

76
00:03:40,400 --> 00:03:43,023
not that there is a connect method.

77
00:03:43,940 --> 00:03:46,870
So therefore of course, we should remove this if-check

78
00:03:46,870 --> 00:03:48,980
because we know we got a database

79
00:03:48,980 --> 00:03:50,920
which only has a store data method

80
00:03:50,920 --> 00:03:53,970
and we don't have a connect method here.

81
00:03:53,970 --> 00:03:58,140
Instead it's now the place where we create our app

82
00:03:58,140 --> 00:04:00,770
where we have to provide a database

83
00:04:00,770 --> 00:04:03,290
as expected by this class.

84
00:04:03,290 --> 00:04:04,570
And that's why it's called

85
00:04:04,570 --> 00:04:07,560
the Dependency Inversion Principle.

86
00:04:07,560 --> 00:04:11,700
We no longer care about the data here in the app class.

87
00:04:11,700 --> 00:04:14,950
So in the consuming class, we don't wanna check

88
00:04:14,950 --> 00:04:16,579
which kind of data we got here.

89
00:04:16,579 --> 00:04:19,300
Instead, we invert the dependency

90
00:04:19,300 --> 00:04:22,940
and we don't depend on the type of database,

91
00:04:22,940 --> 00:04:27,310
but instead we force whoever is instantiating that class

92
00:04:27,310 --> 00:04:31,053
to provide us a database which will fulfills this contract.

93
00:04:32,010 --> 00:04:34,240
And just this contract.

94
00:04:34,240 --> 00:04:38,510
So wherever we are instantiating the app class

95
00:04:38,510 --> 00:04:41,330
we now need to pass in a new database.

96
00:04:41,330 --> 00:04:44,100
And therefore it's now here in this place

97
00:04:44,100 --> 00:04:48,320
where I for example need to create a new SQL database

98
00:04:48,320 --> 00:04:50,980
and also call connect here.

99
00:04:50,980 --> 00:04:55,980
Because that's now my responsibility here in this place.

100
00:04:56,160 --> 00:04:58,180
The app doesn't care about it

101
00:04:58,180 --> 00:05:01,080
because it inverted the dependencies.

102
00:05:01,080 --> 00:05:04,450
It tells me to provide a proper value.

103
00:05:04,450 --> 00:05:07,530
It doesn't want to check it internally.

104
00:05:07,530 --> 00:05:10,370
And this tends to be more maintainable

105
00:05:10,370 --> 00:05:11,660
because you can even use

106
00:05:11,660 --> 00:05:15,480
Dependency Injection frameworks and approaches

107
00:05:15,480 --> 00:05:18,490
to have only a few places in your application

108
00:05:18,490 --> 00:05:20,800
where things are created.

109
00:05:20,800 --> 00:05:24,840
So where for example, this database is created and connected

110
00:05:24,840 --> 00:05:27,370
and to have many places in your app

111
00:05:27,370 --> 00:05:32,250
where you then depend on this abstract database.

112
00:05:32,250 --> 00:05:35,550
That's the idea of the Dependency Inversion Principle.

113
00:05:35,550 --> 00:05:39,590
And that's how you write code that follows this principle.

114
00:05:39,590 --> 00:05:41,950
Now, of course like all these principles

115
00:05:41,950 --> 00:05:44,830
there also is a connection to Clean Code here.

116
00:05:44,830 --> 00:05:46,860
By inverting the dependency,

117
00:05:46,860 --> 00:05:49,980
of course we reduce the amount of code we have in here

118
00:05:49,980 --> 00:05:52,070
and that of course automatically makes this

119
00:05:52,070 --> 00:05:56,870
smaller more readable and avoids code duplication.

120
00:05:56,870 --> 00:05:58,950
So it certainly matters.

121
00:05:58,950 --> 00:06:01,130
But the Dependency Inversion Principle

122
00:06:01,130 --> 00:06:03,300
is also kind of a result

123
00:06:03,300 --> 00:06:07,180
or at least strongly related to the other principles.

124
00:06:07,180 --> 00:06:09,570
And in addition the key benefit

125
00:06:09,570 --> 00:06:13,530
definitely is maintainability and extensibility.

126
00:06:13,530 --> 00:06:16,810
So of course it matters, all of these principles matter

127
00:06:16,810 --> 00:06:19,440
but I would argue it's not as important

128
00:06:19,440 --> 00:06:22,430
as the first two principles, which were covered.

129
00:06:22,430 --> 00:06:24,100
The Single Responsibility

130
00:06:24,100 --> 00:06:26,850
and the Open-Closed Principle.

131
00:06:26,850 --> 00:06:30,600
Nonetheless, we now had a look at all these SOLID principles

132
00:06:30,600 --> 00:06:33,610
which are popular for a good reason.

133
00:06:33,610 --> 00:06:36,270
And if you are working with classes

134
00:06:36,270 --> 00:06:38,940
and especially if you are following

135
00:06:38,940 --> 00:06:40,690
Project Oriented approach,

136
00:06:40,690 --> 00:06:44,170
if you are writing code in an object oriented way

137
00:06:44,170 --> 00:06:48,030
you should also consider and respect these principles

138
00:06:48,030 --> 00:06:49,930
because ultimately they will lead

139
00:06:49,930 --> 00:06:52,880
to more maintainable and extensible code.

140
00:06:52,880 --> 00:06:55,270
And as a great side effect,

141
00:06:55,270 --> 00:06:58,113
they also tend to give you Cleaner Code.

