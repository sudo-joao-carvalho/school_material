1
00:00:02,240 --> 00:00:04,110
Now, what would be next steps?

2
00:00:04,110 --> 00:00:06,900
In this course, we focused on Clean Code.

3
00:00:06,900 --> 00:00:09,420
And I mentioned in course section one,

4
00:00:09,420 --> 00:00:10,630
that there also is

5
00:00:10,630 --> 00:00:13,100
something called Clean Architecture.

6
00:00:13,100 --> 00:00:15,720
This could be something you wanna dive in next,

7
00:00:15,720 --> 00:00:17,210
but this will then depend

8
00:00:17,210 --> 00:00:19,870
on which programming paradigm you're following

9
00:00:19,870 --> 00:00:23,420
if you are doing object-oriented programming, for example,

10
00:00:23,420 --> 00:00:24,570
and it will depend

11
00:00:24,570 --> 00:00:27,530
on the programming language you chose.

12
00:00:27,530 --> 00:00:28,840
There, you can then dive

13
00:00:28,840 --> 00:00:31,210
into some conventions, patterns,

14
00:00:31,210 --> 00:00:34,740
and ideas to organize your code and your project

15
00:00:34,740 --> 00:00:37,700
such that it is very extensible and maintainable,

16
00:00:37,700 --> 00:00:40,440
and that you have such a clean architecture,

17
00:00:40,440 --> 00:00:41,790
where you, for example,

18
00:00:41,790 --> 00:00:46,660
separate your database access logic from your view logic

19
00:00:46,660 --> 00:00:48,130
or anything like that.

20
00:00:48,130 --> 00:00:49,430
This could be something

21
00:00:49,430 --> 00:00:51,120
which is interesting as well,

22
00:00:51,120 --> 00:00:54,380
in addition to knowing all these clean code rules

23
00:00:54,380 --> 00:00:56,150
covered in this course.

24
00:00:56,150 --> 00:00:58,870
Another possible next step,

25
00:00:58,870 --> 00:01:02,150
or an area you could consider diving in deeper

26
00:01:02,150 --> 00:01:05,260
would be testing and test-driven development.

27
00:01:05,260 --> 00:01:08,230
In this course, I did not focus on testing

28
00:01:08,230 --> 00:01:10,580
or test-driven development at all,

29
00:01:10,580 --> 00:01:13,300
just as mentioned in course section one.

30
00:01:13,300 --> 00:01:14,133
I did, of course,

31
00:01:14,133 --> 00:01:15,770
show that testing does help

32
00:01:15,770 --> 00:01:17,770
with writing clean code, though,

33
00:01:17,770 --> 00:01:19,360
in the functions section,

34
00:01:19,360 --> 00:01:22,290
I showed that you can determine

35
00:01:22,290 --> 00:01:24,600
when to split your functions,

36
00:01:24,600 --> 00:01:26,970
or at least get some help there

37
00:01:26,970 --> 00:01:30,260
when you do write tests because it turns out

38
00:01:30,260 --> 00:01:33,000
that functions which are written in a clean way

39
00:01:33,000 --> 00:01:36,890
and do just one thing are easier to test.

40
00:01:36,890 --> 00:01:40,080
So, therefore, diving deeper into testing,

41
00:01:40,080 --> 00:01:42,370
and maybe even test-driven development

42
00:01:42,370 --> 00:01:44,120
could also be something you wanna do

43
00:01:44,120 --> 00:01:45,630
as a next step.

44
00:01:45,630 --> 00:01:47,170
And you could also argue

45
00:01:47,170 --> 00:01:50,250
that having a suit of working tests,

46
00:01:50,250 --> 00:01:53,460
and that you're testing everything your application does

47
00:01:53,460 --> 00:01:57,540
is a part of having a clean code base overall.

48
00:01:57,540 --> 00:02:00,700
Now, it doesn't directly affect your code,

49
00:02:00,700 --> 00:02:02,470
or at least only to some extent,

50
00:02:02,470 --> 00:02:04,880
as mentioned in the functions section.

51
00:02:04,880 --> 00:02:07,360
But of course, tests have one advantage.

52
00:02:07,360 --> 00:02:10,639
If I read a test, I also understand

53
00:02:10,639 --> 00:02:12,100
what a certain function

54
00:02:12,100 --> 00:02:15,050
or a certain part of your code should do

55
00:02:15,050 --> 00:02:16,510
and how it should be used.

56
00:02:16,510 --> 00:02:20,330
And that's why tests also could help with readability.

57
00:02:20,330 --> 00:02:21,850
Now, testing, of course,

58
00:02:21,850 --> 00:02:24,270
is generally always the same.

59
00:02:24,270 --> 00:02:27,730
But how you write and run your tests then depends

60
00:02:27,730 --> 00:02:30,120
on the programming language you used,

61
00:02:30,120 --> 00:02:33,450
and therefore was not the focus of this course.

62
00:02:33,450 --> 00:02:35,490
Nonetheless, as a next step,

63
00:02:35,490 --> 00:02:37,150
diving deeper into testing

64
00:02:37,150 --> 00:02:39,060
and test-driven development

65
00:02:39,060 --> 00:02:41,663
is definitely something you should consider.

